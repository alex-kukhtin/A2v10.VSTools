// Copyright © 2024 Oleksandr Kukhtin. All rights reserved.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace XamlEditor;

internal class SqlTextBuilder(AppNode _node)
{
	private const String AUTO_GENERATED = """
		------------------------------------------------
		-- <auto-generated>

		""";

	public IEnumerable<String> BuildTablesArray()
	{
		foreach (var t in _node.Catalogs)
		{
			yield return BuildTable(t, _node);
			foreach (var d in t.Details)
				yield return BuildTable(d, _node);
		}
		foreach (var t in _node.Documents)
		{
			yield return BuildTable(t, _node);
			foreach (var d in t.Details)
				yield return BuildTable(d, _node);
		}
		foreach (var t in _node.Journals)
			yield return BuildTable(t, _node);

	}
	public String BuildTables()
	{
		StringBuilder builder = new(AUTO_GENERATED);
		foreach (var t in BuildTablesArray())
		{
			builder.AppendLine(t);
		}
		return builder.ToString();
	}

	public String BuildTableTypes()
	{
		StringBuilder builder = new(AUTO_GENERATED);
		foreach (var t in _node.Catalogs)
		{
			builder.AppendLine(BuildTableType(t));
			foreach (var d in t.Details)
				builder.AppendLine(BuildTableType(d, $"{t.Name.Singular()}."));
		}
		foreach (var t in _node.Documents)
		{
			builder.AppendLine(BuildTableType(t));
			foreach (var d in t.Details)
				builder.AppendLine(BuildTableType(d, $"{t.Name.Singular()}."));
		}
		return builder.ToString();
	}

	public String BuildSchemas()
	{
		StringBuilder builder = new(AUTO_GENERATED);
		builder.AppendLine("""
		------------------------------------------------
		if not exists(select * from INFORMATION_SCHEMA.SCHEMATA where SCHEMA_NAME=N'cat')
			exec sp_executesql N'create schema cat authorization dbo';
		go
		------------------------------------------------
		if not exists(select * from INFORMATION_SCHEMA.SCHEMATA where SCHEMA_NAME=N'doc')
			exec sp_executesql N'create schema doc authorization dbo';
		go
		------------------------------------------------
		if not exists(select * from INFORMATION_SCHEMA.SCHEMATA where SCHEMA_NAME=N'jrn')
			exec sp_executesql N'create schema jrn authorization dbo';
		go
		------------------------------------------------
		alter authorization on schema::cat to dbo;
		alter authorization on schema::doc to dbo;
		alter authorization on schema::jrn to dbo;
		go
		------------------------------------------------
		grant execute on schema::cat to public;
		grant execute on schema::doc to public;
		grant execute on schema::jrn to public;
		go
		
		""");
		return builder.ToString();
	}

	String BuildTable(TableNode table, AppNode node)
	{
		var tableName = table.Name;
		var schema = table.Schema;

		var fields = table.DefaultFields.Union(table.Fields).Select(f => f.SqlCreateField(table, node));	

		return $""""
		------------------------------------------------
		if not exists(select * from INFORMATION_SCHEMA.SEQUENCES where SEQUENCE_SCHEMA = N'{schema}' and SEQUENCE_NAME = N'SQ_{tableName}')
			create sequence {schema}.SQ_{tableName} as bigint start with 100 increment by 1;
		go
		------------------------------------------------
		if not exists(select * from INFORMATION_SCHEMA.TABLES where TABLE_SCHEMA=N'{schema}' and TABLE_NAME=N'{tableName}')
		create table {schema}.{tableName.EscapeSql()}
		(
			{String.Join(",\r\n\t", fields)}
		);
		go
		"""";
	}

	String BuildTableType(TableNode table, String prefix = null)
	{
		var tableName = table.Name.Singular();
		var schema = table.Schema;
		var fields = table.DefaultFields.Where(f => f.Name != "Void" && f.Type != FieldType.Parent).Union(table.Fields).Select(f => $"{f.Name.EscapeSql()} {f.SqlTableType()}");
		return $""""
		------------------------------------------------
		drop type if exists {schema}.[{prefix}{tableName}.TableType];
		go
		------------------------------------------------
		create type {schema}.[{prefix}{tableName}.TableType] as table
		(
			{String.Join(",\r\n\t", fields)}
		);
		go
		"""";
	}

	public String BuildUI()
	{
		var sb = new StringBuilder(AUTO_GENERATED);

		sb.AppendLine($"""
		begin
			set nocount on;			

			declare @moduleId uniqueidentifier = N'{_node.Id}';
			declare @appName sysname = N'{_node.Name.Replace("'", "''")}';
			declare @appTitle nvarchar(255) = N'{_node.Title.Replace("'", "''")}';
		
			update a2sys.SysParams set StringValue = @appTitle where [Name] = N'AppTitle';		
			if @@rowcount = 0
				insert into a2sys.SysParams ([Name], StringValue) values (N'AppTitle', @appTitle);

			update a2sys.Applications set [Uid] = @moduleId, [Name] = @appName where Id = 1 and TenantId = 1;
			if @@rowcount = 0
				insert into a2sys.Applications (TenantId, Id, [Uid], [Name], IsDevelopment, [Version]) values (1, 1, @moduleId, @appName, 1, 1);
		
		""");

		List<String> menuFields = [];
		Int32 order = 0;
		foreach (var menu in _node.Menu)
			foreach (var me in menu.PlainElements(Guid.Empty, order += 10))
				menuFields.Add($"(N'{me.Id}', N'{me.Parent}', {me.Order}, {me.MenuName().StringValueOrNull()}, {me.Url.StringValueOrNull("page:", "/index/0")}, {me.Icon.StringValueOrNull()}, {me.MenuClassName()})");

		sb.AppendLine($""""

			exec a2ui.RegisterModule @ModuleId = @moduleId, @Name = N'Main'
			exec a2ui.[Tenant.ConnectModule] @ModuleId = @moduleId, @TenantId = 1;

			declare @menu a2ui.[Menu.TableType];

			insert into @menu(Id, Parent, [Order], [Name], [Url], Icon, ClassName)
			values
			(N'{Guid.Empty}', null, 0, N'Main', null, null, null),
			{String.Join(",\r\n\t", menuFields)};

			exec a2ui.[Menu.Merge] 1, @menu, @ModuleId;
		end
		go
		"""");
		return sb.ToString();
	}
}
